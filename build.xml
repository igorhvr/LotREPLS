<!-- This is a template Ant file for a very basic Google AppEngine project -->

<project name="LotREPLs" default="compile">

  <import file="build-gwt.xml" />

  <!-- When you copy this template to your working directories, change the
       value of appengine.sdk accordingly.  You may also want to use Ant's
       property file feature, allowing each developer to have their own
       local property file with the path to the SDK from that workspace. -->
  <property name="appengine.sdk" location="../appengine-java-sdk-1.2.0" />

  <!-- Check that the SDK value is set and seems sane, so we can give a nicer
       error if not.  -->
  <fail message="Please define the appengine.sdk property to point to your SDK directory">
    <condition>
      <not> <and>
          <isset property="appengine.sdk"/>
          <available file="${appengine.sdk}/config/user/ant-macros.xml"/>
      </and> </not>
    </condition>
  </fail>

  <path id="frontend.classpath">
    <pathelement path="src" />
    <fileset file="${gwt.sdk.dir}/gwt-user.jar" />
    <fileset file="${gwt.sdk.dir}/gwt-dev-${gwt.platform}.jar" />
  </path>

  <!-- Pick up the Ant macros and taskdefs for App Engine -->
  <import file="${appengine.sdk}/config/user/ant-macros.xml"/>


  <!-- Remote debug port for dev_appserver -->
  <property name="debug.port" value="5005"/>

  <!-- HTTP port for dev_appserver -->
  <property name="http.port" value="8080"/>

  <!-- Name of log file to write logs to -->
  <property name="log.file" value="app.log"/>

  <!-- Number of days worth of logs to retrieve -->
  <property name="log.days" value="2"/>


  <!-- Change if you like e.g. "war" better than "www" for the output -->
  <property name="war.dir" location="war"/>

  <target name="compile.frontend" depends="gwt.checkdistro">
    <compile.gwtc module="com.google.lotrepls.LotREPLs"
      srcdir="src"
      wardir="war"
      classpathref="frontend.classpath" />
  </target>

  <target name="copyjars">
    <copy todir="${war.dir}/WEB-INF/lib" flatten="true">
      <fileset dir="deps">
        <include name="*/*.jar"/>
      </fileset>
    </copy>
    <copy todir="${war.dir}/WEB-INF/lib-python">
      <fileset dir="deps/jython/lib-python">
        <include name="**/*" />
        <include name="*" />
      </fileset>
    </copy>
  </target>

  <target name="compile.backend"
      description="Compile the application servlet code"
      depends="copyjars">
    <mkdir dir="${war.dir}/WEB-INF/classes"/>
    <mkdir dir="${war.dir}/WEB-INF/lib"/>
    <javac srcdir="src/com/google/lotrepls/shared"
        destdir="${war.dir}/WEB-INF/classes">
      <classpath>
        <fileset dir="${appengine.sdk}/lib/user">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${appengine.sdk}/lib/shared">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${war.dir}/WEB-INF/lib">
          <include name="*.jar"/>
        </fileset>
        <fileset file="${gwt.sdk.dir}/gwt-user.jar" />
      </classpath>
     </javac>
     <javac srcdir="src/com/google/lotrepls/server"
        destdir="${war.dir}/WEB-INF/classes">
      <classpath>
        <fileset dir="${appengine.sdk}/lib/user">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${appengine.sdk}/lib/shared">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${war.dir}/WEB-INF/lib">
          <include name="*.jar"/>
        </fileset>
        <fileset file="${gwt.sdk.dir}/gwt-user.jar" />
      </classpath>
    </javac>
  </target>

  <target name="compile" depends="compile.backend, compile.frontend" />

  <target name="clean"
          description="Force a clean slate to rebuild">
    <delete dir="${war.dir}/WEB-INF/classes"/>
    <delete dir="${war.dir}/WEB-INF/lib-python"/>
    <delete dir="${war.dir}/WEB-INF/lib"/>
    <delete dir="${war.dir}/lotrepls"/>
  </target>



  <target name="dev_appserver" depends="compile"
          description="Run the dev_appserver">
    <dev_appserver war="${war.dir}" port="${http.port}"/>
  </target>

  <target name="debug" depends="compile" 
          description="Launches dev_appserver with remote debugging enabled">
    <echo message="Launching dev_appserver on Web port ${http.port}, Java remote debug port ${debug.port}"/>
    <dev_appserver war="${war.dir}" port="${http.port}">
      <options>
        <arg value="--jvm_flag=-Xdebug"/>
        <arg value="--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${debug.port}"/>
      </options>
    </dev_appserver>
  </target>



  <target name="update" depends="compile" 
          description="Uploads the application, including indexes">
    <appcfg action="update" war="${war.dir}"/>
  </target>

  <target name="update_indexes" depends="compile" 
          description="Uploads only the application's indexes">
    <appcfg action="update_indexes" war="${war.dir}"/>
  </target>

  <target name="rollback" depends="compile" 
          description="Rolls back any in-progress application update">
    <appcfg action="rollback" war="${war.dir}"/>
  </target>

  <target name="request_logs" 
          description="Downloads the application's logs">
    <appcfg action="request_logs" war="${war.dir}">
      <options>
        <arg value="--num_days=${log.days}"/>
      </options>
      <args>
        <arg value="${log.file}"/>
      </args>
    </appcfg>
  </target>

</project>
